1)LOGIN
	Endpoint: /login
	Method: POST
	
	Request:
	{
		Username string
		Password string
	}
	
	Response:
	{
		Authenticated bool
		Username string
		UserUID string
		Authorization string
		Role enum
	}

	RoleAdmin    Role = 1
	RoleDoctor   Role = 2
	RoleResearch Role = 3
	RoleNurse    Role = 4

	Authorization that is returned as a response is used in all of the following requests as a salt for hashing time for header authorization:
	"Authorization":"<UTCtimeInRFC3339Format>|<UTCtimeInRFC3339FormatHashedWithTokenAsSalt>

2)LOGOUT
	Endpoint:  /logout
	Metod: POST
	
	Request:<empty>
	
	Response:<empty>

2.5)CHANGE PASS
	Endpoint: /auth/pass
	Method: POST
	
	Request: 
	{
		OldPass string
		NewPass string
	}
	
	Response:<empty>

3)ADMIN API
	3.1)Person
		3.1.1)Create person
			Endpoint: /auth/admin/person
			Method: POST
			
			Request:
			{
				Name        string
				Surname     string
				JMBG        string
				DateOfBirth string
				Address     string
				Email       string
			}
			
			NOTE: Date format - "1989-10-21T00:00:00Z"

			Response:
			{
				Uid string
			}
			
		3.1.2)Update person
 			Endpoint:  /auth/admin/person/{personUID}
			Method: PATCH
			
			Request:
			{
				Name        string
				Surname     string
				JMBG        string
				DateOfBirth string
				Address     string
				Email       string
			}

			Response: <empty>
		
		3.1.3) Get  person
			Endpoint:  /auth/admin/person/{personUID}
			Method: GET
			
			Request:<empty>
			
			Response:
			{
				Name        string
				Surname     string
				JMBG        string
				DateOfBirth string
				Address     string
				Email       string
			}
		
		3.1.4)Get all persons
			Endpoint:  /auth/admin/person
			Method: GET

			Request:<empty>
			
			Response:
			{
				Persons: [
					{
						Uid			string
						Name        string
						Surname     string
						JMBG        string
					},
					{
						Uid			string
						Name        string
						Surname     string
						JMBG        string
					}
					.....
				]
			}

		3.1.5) Delete person
			Endpoint:  /auth/admin/person/{personUID}
			Method: DELETE
			
			Request:<empty>
			
			Response:<empty>


	3.2)Employee
		3.2.1)Create employee
			Endpoint: /auth/admin/employee
			Method: POST
			
			Request:
			{
				Name        	string 
				Surname     	string 
				JMBG        	string 
				DateOfBirth 	string 
				Address     	string 
				Email       	string 
				PersonUid 		string 
				WorkDocumentId 	string
				RoleId        	int
			}
			NOTE:You should either send PersonUid of existing person, or data for creating new person for employee.
			
			Response:
			{
				Uid string
			}

		3.2.2) Update employee
			Endpoint: /auth/admin/employee/{employeeUid}
			Method: PATCH
			
			Request:
			{
				Name        	string
				Surname     	string
				JMBG        	string
				DateOfBirth 	string
				Address     	string
				Email       	string
				WorkDocumentId 	string
				RoleId         	int
			}

			Response:<empty>
	
		3.2.3) Get employee
			Endpoint: /auth/admin/employee/{employeeUid}
			Method: GET

			Request:<empty>
			
			Response:
			{
				Uid 			string
				Name        	string
				Surname     	string
				JMBG        	string
				DateOfBirth 	string
				Address     	string
				Email       	string
				WorkDocumentId 	string
				RoleId         	int
			}
			
			
		3.2.4) Get employees
			Endpoint: /auth/admin/employee
			Method: GET
			
			Request: <empty>
			
			Response:
			{
				Employees:[
					{
						Uid 			string
						Name        	string
						Surname     	string
						WorkDocumentId 	string
						RoleId         	int
					},
					{
						Uid 			string
						Name        	string
						Surname     	string
						WorkDocumentId 	string
						RoleId         	int
					}
					........
				]
			}

		3.2.4) Delete employee
			Endpoint: /auth/admin/employee/{employeeUid}
			Method: DELETE

			Request: <empty>

			Response: <empty>

	3.3)User
		3.3.1)Create user
			Endpoint: /auth/admin/user
			Method: POST
			
			Request:
			{
				Name        	string
				Surname     	string
				JMBG        	string
				DateOfBirth 	string
				Address     	string
				Email       	string
				EmployeeUid 	string
				WorkDocumentId 	string
				RoleId         	int
				Username 		string
				Password 		string
			}
			NOTE:You should either send EmployeeUid of existing employee, or data for creating new employee.
			
			Response:
			{
				Uid string
			}

		3.3.2) Update user
			Endpoint: /auth/admin/user/{userUID}
			Method: PATCH
			
			Request:
			{
				Name        	string
				Surname     	string
				JMBG        	string
				DateOfBirth 	string
				Address     	string
				Email       	string
				WorkDocumentId 	string
				RoleId         	int
				Username  		string
				Password 		string
			}

			Response: <empty>

		3.3.3) Get user
			Endpoint: /auth/admin/user/{userUID}
			Method: GET

			Request:<empty>
			
			Response:
			{
				Uid 			string
				Name        	string
				Surname     	string
				JMBG        	string
				DateOfBirth 	string
				Address     	string
				Email       	string
				WorkDocumentId 	string
				RoleId         	int
				Username 		string
			}

		3.3.4) Get users
			Endpoint: /auth/admin/user
			Method: GET
			
			Request:<empty>
			
			Response:
			{
				Users:[
					{
						Uid string
						Name        string
						Surname     string
						WorkDocumentId string
						RoleId         int
						Username string
					},
					{
						Uid string
						Name        string
						Surname     string
						WorkDocumentId string
						RoleId         int
						Username string
					}
					........
				]
			}
		
		3.3.4) Delete user
			Endpoint: /auth/admin/user/{userUID}
			Method: DELETE

			Request:<empty>

			Response:<empty>

4)Nurse API
	4.1)Person
		4.1.1)Create person
			Endpoint: /auth/nurse/person
			Method: POST
			
			Request:
			{
				Name        string
				Surname     string
				JMBG        string
				DateOfBirth string
				Address     string
				Email       string
			}
			
			NOTE: Date format - "1989-10-21T00:00:00Z"

			Response:
			{
				Uid string
			}
			
		4.1.2)Update person
 			Endpoint:  /auth/nurse/person/{personUID}
			Method: PATCH
			
			Request:
			{
				Name        string
				Surname     string
				JMBG        string
				DateOfBirth string
				Address     string
				Email       string
			}

			Response: <empty>
		
		4.1.3) Get  person
			Endpoint:  /auth/nurse/person/{personUID}
			Method: GET
			
			Request:<empty>
			
			Response:
			{
				Name        string
				Surname     string
				JMBG        string
				DateOfBirth string
				Address     string
				Email       string
			}
		
		4.1.4)Get all persons
			Endpoint:  /auth/nurse/person
			Method: GET

			Request:<empty>
			
			Response:
			{
				Persons: [
					{
						Uid			string
						Name        string
						Surname     string
						JMBG        string
					},
					{
						Uid			string
						Name        string
						Surname     string
						JMBG        string
					}
					.....
				]
			}

	4.2)Patient
		4.2.1)Create patient
			Endpoint: /auth/nurse/patient
			Method: POST
			
			Request:
			{
				Name        			string 
				Surname     			string 
				JMBG        			string 
				DateOfBirth 			string 
				Address     			string 
				Email       			string 
				PersonUid 				string 
				MedicalRecordId      	string    
				HealthCardId         	string    
				HealthCardValidUntil 	string 
			}
			
			Date format - "1989-10-21T00:00:00Z"
			NOTE:You should either send PersonUid of existing person, or data for creating new person for patient.
			
			Response:
			{
				Uid string
			}

		4.2.2) Update patient
			Endpoint: /auth/nurse/patient/{patientUid}
			Method: PATCH
			Request:
			{
				Name        			string
				Surname     			string
				JMBG        			string
				DateOfBirth 			string
				Address     			string
				Email       			string
				MedicalRecordId      	string   
				HealthCardId         	string   
				HealthCardValidUntil 	string 
			}

			Response: <empty>
		
		4.2.3) Get patient
			Endpoint: /auth/nurse/patient/{patientUid}
			Method: GET
			
			Request:<empty>
			
			Response:
			{
				Uid string
				Name        string
				Surname     string
				JMBG        string
				DateOfBirth string
				Address     string
				Email       string
				MedicalRecordId      string   
				HealthCardId         string   
				HealthCardValidUntil string 
			}

		4.2.4)Get patients
			Endpoint: /auth/nurse/patient
			Method: GET

			Request: <empty>

			Response:
			{
				Patients:[
					{
						Uid string
						Name        			string
						Surname     			string
						MedicalRecordId      	string   
						HealthCardId         	string   
						HealthCardValidUntil 	string 
					},
					{
						Uid string
						Name        			string
						Surname     			string
						MedicalRecordId      	string   
						HealthCardId         	string   
						HealthCardValidUntil 	string 
					}
					...........
				]
			}

		4.2.4) Delete patient
			Endpoint: /auth/nurse/patient/{patientUid}
			Method: DELETE

			Request: <empty>
			
			Response: <empty>

4.3)Examination
4.3.1)Create examination
Endpoint: /auth/nurse/examination
Method: POST
Request:
{
	DoctorUid string,
	PatientUID string,
	ExaminationDate string
}
Response:
{
Uid string
}

Format datuma - "1989-10-21T00:00:00Z"
4.3.2) Read examinations
	
Endpoint:  /auth/nurse/examination
Method: GET
Response:
	{
Examination: [{Uid, DoctorUid,DoctorFullName,PatientUid,PatientFullName,ExaminationDate},{Uid, DoctorUid,DoctorFullName,PatientUid,PatientFullName,ExaminationDate}]
}
4.3.4) Delete examinationn
	Endpoint:  /auth/nurse/examination/{examinationUID}
Method: DELETE
4.4)Doctors
4.4.1)Get doctors
Endpoint:  /auth/nurse/doctopr
Method: GET
Response:
{Employees:[
{
Uid string
	Name        string
	Surname     string
	WorkDocumentId string
},
{
Uid string
	Name        string
	Surname     string
	WorkDocumentId string
}]
}

5)Doctor API
5.1)Test
5.1.1)Create test
	Test se kreira uploadom excel fajla. Uploaad se vrsi POST metodom forme na /auth/doctor/test. U formi se fajl nalazi pod imenom fileUpload. Dodatne vrednosti u formi su ime testa koji  se nalazi u formi sa imenom name i sifra(integer) specijalnosti za koju je test pod imenom specialty.
Format fajla:
	U prvoj koloni se nalaze kontrolne reci
	Pocetak - pocetak strukture pitanja
	Pitanje - u celiji desno se nalazi tekst pitanja
	Tip- u celiji desno nalazi se tip (tekst, broj, radio, checkbox)
	Odgovori - ovo je bitno samo za tipove radio i checkbox, u celijama desno se nalaze     ponudjeni odgovori
	Kraj - zavrsetak strukture pitanja
5.1.2)Delete test
	Endpoint: /auth/doctor/test/{testUID}
Method: DELETE
5.1.3)Get test
	Dve opcije: dohvatanje osnovnih informacija o svim testoviima i dohvatanje jednog celog testa.
Dohvatanje vise:
Endpoint: /auth/doctor/test
Method: GET
Response 
{
Tests:   
[
{Name:”smtssmt”,UID:”uid”, Specialty:”specialtyID”},
{Name:”smtssmt”,UID:”uid”, Specialty:”specialtyID”}.....
]
}
Dohvatanje jednog:
Endpoint: /auth/doctor/test/{testUID}
Method: GET
Response 
{
Uid:<uid>,
Specialty <specialtyID>,
	Name:<name>
	Questions: [


 
            "Type": tip pitanja,
            "Answers": lista odgovora (stringovi),
            "Question": tekst pitanja
  },
 
            "Type": 3,
            "Answers": [ "1","2","3", "4", "5", "6", "7", "8","9", "10"  ],
            "Question": "Koliko vas boli glava?"
        }.......

]
}

5.2)Popunjen test
5.1.1)Create filled test
	Endpoint: /auth/doctor/filled
Method: POST
Request:
{
	"ExaminationUid": string
	"TestUid":string
	"Answers":json
}

5.1.2)Delete filled test
	Endpoint:  /auth/doctor/filled/{filledTestUID}
Method: DELETE
5.1.3)Get filled test
	Dve opcije: dohvatanje osnovnih informacija o svim popunjenim testoviima i dohvatanje jednog celog testa.
Dohvatanje vise:
Endpoint: /auth/doctor/filled
Method: GET
Response 
{
FilledTests::   
[
 
            "Uid": string
            "TestName": string
            "ExaminationDate": time
            "PatientName": string
            "PatientUid": string
        
,
 
            "Uid": "2ef9cbea-6838-11e8-9215-680715485aa3",
            "TestName": "test",
            "ExaminationDate": "2018-06-04T00:00:00Z",
            "PatientName": "Natasha Romanova",
            "PatientUid": "8cf17e6c-6835-11e8-9215-680715485aa3"
        
.....
]
}
Dohvatanje jednog:
Endpoint: /auth/doctor/filled/{filledTestUID}
Method: GET
Response
{
    "TestUid": "5da8fa28-5c5e-11e8-b3f1-680715485aa3",
    “TestName”:”name”,
    "ExaminationUID": "5da8fa28-5c5e-11e8-b3f1-680715485aa3",
    "Answers": "{'Pittanje1':1,'Pitanje2':'Jeste'}"
}

Answers su JSON u kome stoji potpuno issta stvar koja je poslata u createFilledTest requestu

5.3) Examinations
5.3.1) Read examinations
	
Endpoint:  /auth/doctor/examination
Method: GET
Response:
	{
Examination: [{Uid, DoctorUid,DoctorFullName,PatientUid,PatientFullName,ExaminationDate},{Uid, DoctorUid,DoctorFullName,PatientUid,PatientFullName,ExaminationDate}]
}

